var lecturers={},hash=window.location.hash,page=1,numberOfPages=$("#number-of-pages").text();$(document).ready(function(){hash&&"#page"==hash.substring(0,5)&&(page=parseInt(hash.substring(6))),$("#pagination").pagination({items:numberOfPages,itemOnPage:8,currentPage:page,cssStyle:"",prevText:'<span aria-hidden="true">&laquo;</span>',nextText:'<span aria-hidden="true">&raquo;</span>',onInit:function(){getData()},onPageClick:function(e,a){page=e,window.location.hash="#page-"+page,console.log(page),null==lecturers[page]?getData():setDataToTable()}}),$(".unit-search-item.link").click(function(e){var a=$(this);$("#category-search-drop-menu-button").html(a.attr("data-name")+' <span class="caret"></span>'),null!=a.attr("data-id")?$(".unit-id").val(a.attr("data-id")):$(".unit_id").val(null),e.preventDefault()}),$(".form-control.category-search.input").keyup(function(){var e=$(".form-control.category-search.input"),a=e.val();console.log("keyup with text: "+a),$(".unit-search-item").each(function(e){var t=$(this);t.text().toLowerCase().indexOf(a.toLowerCase())>=0?t.show():t.hide()})})});var success=function(e){1==e.status?(console.log("response: "+e),lecturers[page]=[],e.data.forEach(function(e){lecturers[page].push(e)}),setDataToTable(10*(page-1),e.data.length)):showError(e.message)},getData=function(){var e={page:page};"moderator"==$("#current-role").text()&&(e.faculty_id=$("#current-facultyID").text()),$.ajax({url:"/admin/users/api/lecturers",method:"GET",data:e,success:success,error:errorHandler})},setDataToTable=function(){$(".table.table-body").children().remove(),lecturers[page].forEach(function(e){if(null!=e.lecturer){var a="";e.lecturer.fields.forEach(function(e){a.append("<span class='label label-primary'>"+e.name+"</span>")}),$("#table-lecturers").append("<tr><td>"+e.officerNumber+"</td><td>"+e.fullName+"</td><td>"+e.email+"</td><td>"+e.unit.name+"</td><td>"+e.faculty.name+"</td><td>"+a+"</td></tr>")}})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
