var students={},hash=window.location.hash,page=1,numberOfPages=$("#number-of-pages").text();$(document).ready(function(){hash&&"#page"==hash.substring(0,5)&&(page=parseInt(hash.substring(6))),console.log(page),$("#pagination").pagination({items:numberOfPages,itemOnPage:8,currentPage:page,cssStyle:"",prevText:'<span aria-hidden="true">&laquo;</span>',nextText:'<span aria-hidden="true">&raquo;</span>',onInit:function(){getData()},onPageClick:function(t,e){page=t,window.location.hash="#page-"+page,console.log(page),null==students[page]?getData():setDataToTable()}}),configCourseAndProgram(),$("#faculty_id").change(function(){configCourseAndProgram()}),configCourseAndProgramForUpdate(),$("#update-faculty-id").change(function(){configCourseAndProgramForUpdate()}),$("#btn-update-submit").click(function(t){t.preventDefault(),updateInfo()})});var configCourseAndProgram=function(){var t=$("#faculty_id").val(),e=!1;$(".course-option-item").each(function(a,n){$(this).attr("data-faculty-id")!=t?($(this).hide(),$(this).attr("selected",!1)):($(this).show(),0==e&&($(this).attr("selected",!0),e=!0))});var a=!1;$(".program-option-item").each(function(e,n){$(this).attr("data-faculty-id")!=t?($(this).hide(),$(this).attr("selected",!1)):($(this).show(),0==a&&($(this).attr("selected",!0),a=!0))})},configCourseAndProgramForUpdate=function(){var t=$("#update-faculty-id").val(),e=!1;$(".update-course-option-item").each(function(a,n){$(this).attr("data-faculty-id")!=t?($(this).hide(),$(this).attr("selected",!1)):($(this).show(),0==e&&($(this).attr("selected",!0),e=!0))});var a=!1;$(".update-program-option-item").each(function(e,n){$(this).attr("data-faculty-id")!=t?($(this).hide(),$(this).attr("selected",!1)):($(this).show(),0==a&&($(this).attr("selected",!0),a=!0))})},getData=function(){var t={page:page};"moderator"==$("#current-role").text()&&(t.faculty_id=$("#current-facultyID").text()),$.ajax({url:"/admin/users/api/students",method:"GET",data:t,success:function(t){1==t.status?(console.log(t),students[page]=[],t.data.forEach(function(t){students[page].push(t)}),setDataToTable(10*(page-1),t.data.length)):$.toast({heading:"Error",text:t.message,icon:"error"})},error:errorHandler})},updateInfo=function(){$.ajax({url:"/admin/users/api/students/update",method:"POST",data:{officer_number:$("#update-officer-number").val(),email:$("#update-email").val(),faculty_id:$("#update-faculty-id").val(),course_id:$("#update-course-id").val(),program_id:$("#update-program-id").val(),full_name:$("#update-full-name").val(),thesis_registrable:"true"==$("#update-thesis-registrble").val()},success:function(t){if(console.log(t.data),$("#update-student-modal").modal("hide"),1==t.status){for(var e=0;e<=students[page].length;e++)if(students[page][e].id==t.data.id){students[page][e]=t.data;break}console.log(students),setDataToTable()}else $.toast({heading:"Error",text:t.message,icon:"error"})},error:errorHandler})},setDataToTable=function(){$(".table.table-body").children().remove(),students[page].forEach(function(t){if(null!=t.student){var e="NO";t.student.thesisRegistrable&&(e="YES"),$("#table-students").append("<tr><td>"+t.officerNumber+"</td><td>"+t.fullName+"</td><td>"+t.email+"</td><td>"+t.faculty.name+"</td><td>"+t.student.course.name+"</td><td>"+t.student.program.name+"</td><td>"+e+"</td><td><a onclick=\"editStudent(event,'"+t.id+"')\">Edit</a></td></tr>")}})},editStudent=function(t,e){t.preventDefault();var a;for(var n in students)if(a=$.grep(students[n],function(t){return t.id==e})[0],null!=a)break;$("#update-officer-number").val(a.officerNumber),$("#update-email").val(a.email),$("#update-faculty-id").val(a.faculty.id),$("#update-course-id").val(a.student.course.id),$("#update-program-id").val(a.student.program.id),$("#update-full-name").val(a.fullName),$("#update-thesis-registrble").val(a.student.thesisRegistrable?"true":"false"),$("#update-student-modal").modal("show")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
