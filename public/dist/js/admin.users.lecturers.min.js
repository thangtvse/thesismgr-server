var lecturers={},hash=window.location.hash,page=1,numberOfPages=$("#number-of-pages").text();$(document).ready(function(){hash&&"#page"==hash.substring(0,5)&&(page=parseInt(hash.substring(6))),$("#pagination").pagination({items:numberOfPages,itemOnPage:8,currentPage:page,cssStyle:"",prevText:'<span aria-hidden="true">&laquo;</span>',nextText:'<span aria-hidden="true">&raquo;</span>',onInit:function(){getData()},onPageClick:function(e,a){page=e,window.location.hash="#page-"+page,console.log(page),null==lecturers[page]?getData():setDataToTable()}}),$(".unit-search-item.link").click(function(e){var a=$(this);$("#category-search-drop-menu-button").html(a.attr("data-name")+' <span class="caret"></span>'),null!=a.attr("data-id")?$(".unit-id").val(a.attr("data-id")):$(".unit_id").val(null),e.preventDefault()}),$(".form-control.category-search.input").keyup(function(){var e=$(".form-control.category-search.input"),a=e.val();console.log("keyup with text: "+a),$(".unit-search-item").each(function(e){var t=$(this);t.text().toLowerCase().indexOf(a.toLowerCase())>=0?t.show():t.hide()})})});var success=function(e){1==e.status?(console.log("response: "+e),lecturers[page]=[],e.data.forEach(function(e){lecturers[page].push(e)}),setDataToTable(10*(page-1),e.data.length)):showError(e.message)},getData=function(){var e={page:page};"moderator"==$("#current-role").text()&&(e.faculty_id=$("#current-facultyID").text()),$.ajax({url:"/admin/users/api/lecturers",method:"GET",data:e,success:success,error:errorHandler})},setDataToTable=function(){$(".table.table-body").children().remove(),lecturers[page].forEach(function(e){if(null!=e.lecturer){var a="";e.lecturer.fields.forEach(function(e){a.append("<span class='label label-primary'>"+e.name+"</span>")}),$("#table-lecturers").append("<tr><td>"+e.officerNumber+"</td><td>"+e.fullName+"</td><td>"+e.email+"</td><td>"+e.unit.name+"</td><td>"+e.faculty.name+"</td><td>"+a+"</td></tr>")}})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluLnVzZXJzLmxlY3R1cmVycy5qcyJdLCJuYW1lcyI6WyJsZWN0dXJlcnMiLCJoYXNoIiwid2luZG93IiwibG9jYXRpb24iLCJwYWdlIiwibnVtYmVyT2ZQYWdlcyIsIiQiLCJ0ZXh0IiwiZG9jdW1lbnQiLCJyZWFkeSIsInN1YnN0cmluZyIsInBhcnNlSW50IiwicGFnaW5hdGlvbiIsIml0ZW1zIiwiaXRlbU9uUGFnZSIsImN1cnJlbnRQYWdlIiwiY3NzU3R5bGUiLCJwcmV2VGV4dCIsIm5leHRUZXh0Iiwib25Jbml0IiwiZ2V0RGF0YSIsIm9uUGFnZUNsaWNrIiwiZXZ0IiwiY29uc29sZSIsImxvZyIsInNldERhdGFUb1RhYmxlIiwiY2xpY2siLCJlIiwiYSIsInRoaXMiLCJodG1sIiwiYXR0ciIsInZhbCIsInByZXZlbnREZWZhdWx0Iiwia2V5dXAiLCJpbnB1dCIsInNlYXJjaFRleHQiLCJlYWNoIiwiaW5kZXgiLCJpdGVtIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2hvdyIsImhpZGUiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJkYXRhIiwiZm9yRWFjaCIsImxlY3R1cmVyIiwicHVzaCIsImxlbmd0aCIsInNob3dFcnJvciIsIm1lc3NhZ2UiLCJmYWN1bHR5X2lkIiwiYWpheCIsInVybCIsIm1ldGhvZCIsImVycm9yIiwiZXJyb3JIYW5kbGVyIiwiY2hpbGRyZW4iLCJyZW1vdmUiLCJmaWVsZHNIdG1sIiwiZmllbGRzIiwiZmllbGQiLCJhcHBlbmQiLCJuYW1lIiwib2ZmaWNlck51bWJlciIsImZ1bGxOYW1lIiwiZW1haWwiLCJ1bml0IiwiZmFjdWx0eSJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsY0FDQUMsS0FBT0MsT0FBT0MsU0FBU0YsS0FDdkJHLEtBQU8sRUFDUEMsY0FBZ0JDLEVBQUUsb0JBQW9CQyxNQUUxQ0QsR0FBRUUsVUFBVUMsTUFBTSxXQUVWUixNQUFnQyxTQUF4QkEsS0FBS1MsVUFBVSxFQUFHLEtBQzFCTixLQUFPTyxTQUFTVixLQUFLUyxVQUFVLEtBR25DSixFQUFFLGVBQWVNLFlBQ2JDLE1BQU9SLGNBQ1BTLFdBQVksRUFDWkMsWUFBYVgsS0FDYlksU0FBVSxHQUNWQyxTQUFVLDBDQUNWQyxTQUFVLDBDQUNWQyxPQUFRLFdBRUpDLFdBRUpDLFlBQWEsU0FBVU4sRUFBYU8sR0FFaENsQixLQUFPVyxFQUNQYixPQUFPQyxTQUFTRixLQUFPLFNBQVdHLEtBQ2xDbUIsUUFBUUMsSUFBSXBCLE1BQ1csTUFBbkJKLFVBQVVJLE1BQ1ZnQixVQUVBSyxvQkFPWm5CLEVBQUUsMEJBQTBCb0IsTUFBTSxTQUFVQyxHQUN4QyxHQUFJQyxHQUFJdEIsRUFBRXVCLEtBR1Z2QixHQUFFLHFDQUFxQ3dCLEtBQUtGLEVBQUVHLEtBQUssYUFBZSxnQ0FDekMsTUFBckJILEVBQUVHLEtBQUssV0FHUHpCLEVBQUUsWUFBWTBCLElBQUlKLEVBQUVHLEtBQUssWUFHekJ6QixFQUFFLFlBQVkwQixJQUFJLE1BSXRCTCxFQUFFTSxtQkFHTjNCLEVBQUUsdUNBQXVDNEIsTUFBTSxXQUMzQyxHQUFJQyxHQUFRN0IsRUFBRSx1Q0FDVjhCLEVBQWFELEVBQU1ILEtBRXZCVCxTQUFRQyxJQUFJLG9CQUFzQlksR0FFbEM5QixFQUFFLHFCQUFxQitCLEtBQUssU0FBVUMsR0FFbEMsR0FBSUMsR0FBT2pDLEVBQUV1QixLQUVUVSxHQUFLaEMsT0FBT2lDLGNBQWNDLFFBQVFMLEVBQVdJLGdCQUFrQixFQUMvREQsRUFBS0csT0FFTEgsRUFBS0ksWUFNckIsSUFBSUMsU0FBVSxTQUFVQyxHQUNHLEdBQW5CQSxFQUFTQyxRQUVUdkIsUUFBUUMsSUFBSSxhQUFlcUIsR0FFM0I3QyxVQUFVSSxTQUVWeUMsRUFBU0UsS0FBS0MsUUFBUSxTQUFVQyxHQUM1QmpELFVBQVVJLE1BQU04QyxLQUFLRCxLQUd6QnhCLGVBQTRCLElBQVpyQixLQUFPLEdBQVN5QyxFQUFTRSxLQUFLSSxTQUcvQ0MsVUFBVVAsRUFBU1EsVUFJdEJqQyxRQUFVLFdBRVYsR0FBSTJCLElBQ0EzQyxLQUFNQSxLQUd1QixjQUE3QkUsRUFBRSxpQkFBaUJDLFNBQ25Cd0MsRUFBS08sV0FBYWhELEVBQUUsc0JBQXNCQyxRQUc5Q0QsRUFBRWlELE1BQ0VDLElBQUssNkJBQ0xDLE9BQVEsTUFDUlYsS0FBTUEsRUFDTkgsUUFBU0EsUUFDVGMsTUFBT0MsZ0JBSVhsQyxlQUFpQixXQUNqQm5CLEVBQUUscUJBQXFCc0QsV0FBV0MsU0FFbEM3RCxVQUFVSSxNQUFNNEMsUUFBUSxTQUFVQyxHQUM5QixHQUF5QixNQUFyQkEsRUFBU0EsU0FBa0IsQ0FDM0IsR0FBSWEsR0FBYSxFQUVqQmIsR0FBU0EsU0FBU2MsT0FBT2YsUUFBUSxTQUFVZ0IsR0FDdkNGLEVBQVdHLE9BQU8scUNBQXVDRCxFQUFNRSxLQUFPLGFBRzFFNUQsRUFBRSxvQkFBb0IyRCxPQUFPLFdBQ2hCaEIsRUFBU2tCLGNBQWdCLFlBQ3pCbEIsRUFBU21CLFNBQVcsWUFDcEJuQixFQUFTb0IsTUFBUSxZQUNqQnBCLEVBQVNxQixLQUFLSixLQUFPLFlBQ3JCakIsRUFBU3NCLFFBQVFMLEtBQU8sWUFDeEJKLEVBQWEiLCJmaWxlIjoiYWRtaW4udXNlcnMubGVjdHVyZXJzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBsZWN0dXJlcnMgPSB7fTtcclxudmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxudmFyIHBhZ2UgPSAxO1xyXG52YXIgbnVtYmVyT2ZQYWdlcyA9ICQoXCIjbnVtYmVyLW9mLXBhZ2VzXCIpLnRleHQoKTtcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICBpZiAoaGFzaCAmJiBoYXNoLnN1YnN0cmluZygwLCA1KSA9PSAnI3BhZ2UnKSB7XHJcbiAgICAgICAgcGFnZSA9IHBhcnNlSW50KGhhc2guc3Vic3RyaW5nKDYpKTtcclxuICAgIH1cclxuXHJcbiAgICAkKCcjcGFnaW5hdGlvbicpLnBhZ2luYXRpb24oe1xyXG4gICAgICAgIGl0ZW1zOiBudW1iZXJPZlBhZ2VzLFxyXG4gICAgICAgIGl0ZW1PblBhZ2U6IDgsXHJcbiAgICAgICAgY3VycmVudFBhZ2U6IHBhZ2UsXHJcbiAgICAgICAgY3NzU3R5bGU6ICcnLFxyXG4gICAgICAgIHByZXZUZXh0OiAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JmxhcXVvOzwvc3Bhbj4nLFxyXG4gICAgICAgIG5leHRUZXh0OiAnPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnJhcXVvOzwvc3Bhbj4nLFxyXG4gICAgICAgIG9uSW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBmaXJlIGZpcnN0IHBhZ2UgbG9hZGluZ1xyXG4gICAgICAgICAgICBnZXREYXRhKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24gKGN1cnJlbnRQYWdlLCBldnQpIHtcclxuICAgICAgICAgICAgLy8gc29tZSBjb2RlXHJcbiAgICAgICAgICAgIHBhZ2UgPSBjdXJyZW50UGFnZTtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIiNwYWdlLVwiICsgcGFnZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGFnZSk7XHJcbiAgICAgICAgICAgIGlmIChsZWN0dXJlcnNbcGFnZV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2V0RGF0YVRvVGFibGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi51bml0LXNlYXJjaC1pdGVtLmxpbmtcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgYSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHNldCB0ZXh0IGZvciBkcm9wLWRvd24gbWVudVxyXG4gICAgICAgICQoXCIjY2F0ZWdvcnktc2VhcmNoLWRyb3AtbWVudS1idXR0b25cIikuaHRtbChhLmF0dHIoXCJkYXRhLW5hbWVcIikgKyBcIiA8c3BhbiBjbGFzcz1cXFwiY2FyZXRcXFwiPjwvc3Bhbj5cIik7XHJcbiAgICAgICAgaWYgKGEuYXR0cihcImRhdGEtaWRcIikgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBzZXQgdmFsdWUgZm9yIGZvcm1cclxuXHJcbiAgICAgICAgICAgICQoXCIudW5pdC1pZFwiKS52YWwoYS5hdHRyKFwiZGF0YS1pZFwiKSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoXCIudW5pdF9pZFwiKS52YWwobnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5mb3JtLWNvbnRyb2wuY2F0ZWdvcnktc2VhcmNoLmlucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW5wdXQgPSAkKFwiLmZvcm0tY29udHJvbC5jYXRlZ29yeS1zZWFyY2guaW5wdXRcIik7XHJcbiAgICAgICAgdmFyIHNlYXJjaFRleHQgPSBpbnB1dC52YWwoKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJrZXl1cCB3aXRoIHRleHQ6IFwiICsgc2VhcmNoVGV4dCk7XHJcblxyXG4gICAgICAgICQoXCIudW5pdC1zZWFyY2gtaXRlbVwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0udGV4dCgpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc2hvdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxudmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcInJlc3BvbnNlOiBcIiArIHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgbGVjdHVyZXJzW3BhZ2VdID0gW107XHJcblxyXG4gICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAobGVjdHVyZXIpIHtcclxuICAgICAgICAgICAgbGVjdHVyZXJzW3BhZ2VdLnB1c2gobGVjdHVyZXIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZXREYXRhVG9UYWJsZSgocGFnZSAtIDEpICogMTAsIHJlc3BvbnNlLmRhdGEubGVuZ3RoKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgc2hvd0Vycm9yKHJlc3BvbnNlLm1lc3NhZ2UpXHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICBwYWdlOiBwYWdlXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICgkKFwiI2N1cnJlbnQtcm9sZVwiKS50ZXh0KCkgPT0gXCJtb2RlcmF0b3JcIikge1xyXG4gICAgICAgIGRhdGEuZmFjdWx0eV9pZCA9ICQoXCIjY3VycmVudC1mYWN1bHR5SURcIikudGV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiBcIi9hZG1pbi91c2Vycy9hcGkvbGVjdHVyZXJzXCIsXHJcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcclxuICAgICAgICBlcnJvcjogZXJyb3JIYW5kbGVyXHJcbiAgICB9KTtcclxufTtcclxuXHJcbnZhciBzZXREYXRhVG9UYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICQoJy50YWJsZS50YWJsZS1ib2R5JykuY2hpbGRyZW4oKS5yZW1vdmUoKTtcclxuXHJcbiAgICBsZWN0dXJlcnNbcGFnZV0uZm9yRWFjaChmdW5jdGlvbiAobGVjdHVyZXIpIHtcclxuICAgICAgICBpZiAobGVjdHVyZXIubGVjdHVyZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgZmllbGRzSHRtbCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBsZWN0dXJlci5sZWN0dXJlci5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkc0h0bWwuYXBwZW5kKFwiPHNwYW4gY2xhc3M9J2xhYmVsIGxhYmVsLXByaW1hcnknPlwiICsgZmllbGQubmFtZSArIFwiPC9zcGFuPlwiKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKCcjdGFibGUtbGVjdHVyZXJzJykuYXBwZW5kKCc8dHI+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRkPicgKyBsZWN0dXJlci5vZmZpY2VyTnVtYmVyICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRkPicgKyBsZWN0dXJlci5mdWxsTmFtZSArICc8L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgJzx0ZD4nICsgbGVjdHVyZXIuZW1haWwgKyAnPC90ZD4nICtcclxuICAgICAgICAgICAgICAgICc8dGQ+JyArIGxlY3R1cmVyLnVuaXQubmFtZSArICc8L3RkPicgK1xyXG4gICAgICAgICAgICAgICAgJzx0ZD4nICsgbGVjdHVyZXIuZmFjdWx0eS5uYW1lICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAnPHRkPicgKyBmaWVsZHNIdG1sICsgJzwvdGQ+JyArXHJcbiAgICAgICAgICAgICAgICAnPC90cj4nXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuIl19
